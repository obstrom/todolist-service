package com.obstrom.todolistservice.service;

import com.obstrom.todolistservice.error.exception.EntityNotFoundException;
import com.obstrom.todolistservice.error.exception.UniqueFieldConstraintException;
import com.obstrom.todolistservice.model.User;
import com.obstrom.todolistservice.repository.UserRepository;
import com.obstrom.todolistservice.utility.AppUtility;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;

@Service
public class UserService {

    private final UserRepository userRepository;

    @Autowired
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public List<User> findAllUsers() {
        Iterable<User> iterable = userRepository.findAll();
        return AppUtility.convertIterableToList(iterable);
    }

    public User findUserById(String userId) {
        return userRepository.findById(userId)
                .orElseThrow(() -> new EntityNotFoundException(String.format("No user with ID '%s' found", userId)));
    }

    public User findUserByUsername(String username) {
        // TODO - Add custom exception and handler
        return userRepository.findUserByUsername(username)
                .orElseThrow(() -> new EntityNotFoundException(String.format("No user with username '%s' found", username)));
    }

    public User createNewUser(String username, String password) {
        // TODO - Add role with security

        // Validate new user
        if (userRepository.findUserByUsername(username).isPresent())
            throw new UniqueFieldConstraintException(String.format("Username '%s' is already taken", username));

        // Build user
        User newUser = User.builder()
                .id(null) // generated by database
                .createdAt(new Date())
                .username(username)
                .password(password)
                .build();

        return userRepository.save(newUser);
    }

    public void deleteUser(String userId) {
        userRepository.delete(findUserById(userId));
    }

}
